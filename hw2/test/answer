(program procedure EMPTY is declare (variables (variables (variables variables (variable APPLE : integer ;)) (variable BANANA : integer ;)) (variable CAR : integer ;)) begin (statements (statements (statements (statements (statements (statements (statements statements (statement (assignment_statement APPLE := (arith_expression (arith_term (arith_factor (arith_primary 10)) arith_term_R) arith_expression_R) ;))) (statement (assignment_statement BANANA := (arith_expression (arith_term (arith_factor (arith_primary 50)) arith_term_R) arith_expression_R) ;))) (statement (assignment_statement CAR := (arith_expression (arith_term (arith_factor (arith_primary 24)) arith_term_R) arith_expression_R) ;))) (statement (if_statement if (bool_expression (bool_term (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary 1)) arith_term_R) arith_expression_R) (relation_op <>) (arith_expression (arith_term (arith_factor (arith_primary 1)) arith_term_R) arith_expression_R))) bool_term_R) bool_expression_R) then (statements statements (statement (exit_statement exit ;))) end if ;))) (statement (if_statement if (bool_expression (bool_term (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary APPLE)) (arith_term_R % (arith_factor (arith_primary 5)) arith_term_R)) (arith_expression_R + (arith_term (arith_factor (arith_primary 7)) arith_term_R) arith_expression_R)) (relation_op >=) (arith_expression (arith_term (arith_factor (arith_primary BANANA)) arith_term_R) arith_expression_R))) bool_term_R) bool_expression_R) then (statements (statements (statements statements (statement (read_statement read APPLE ;))) (statement (write_statement write (arith_expression (arith_term (arith_factor (arith_primary BANANA)) arith_term_R) arith_expression_R) ;))) (statement (write_statement write (arith_expression (arith_term (arith_factor (arith_primary ( (arith_expression (arith_term (arith_factor (arith_primary 6)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary 1)) arith_term_R) arith_expression_R)) ))) (arith_term_R * (arith_factor (arith_primary ( (arith_expression (arith_term (arith_factor (arith_primary 5)) arith_term_R) (arith_expression_R - (arith_term (arith_factor (arith_primary ( (arith_expression (arith_term (arith_factor (arith_primary 2)) (arith_term_R % (arith_factor (arith_primary 3)) arith_term_R)) arith_expression_R) ))) arith_term_R) arith_expression_R)) ))) (arith_term_R / (arith_factor (arith_primary 1)) arith_term_R))) arith_expression_R) ;))) else (statements statements (statement (for_statement for APPLE in (arith_expression (arith_term (arith_factor (arith_primary 5)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary 7)) arith_term_R) arith_expression_R)) .. (arith_expression (arith_term (arith_factor (arith_primary BANANA)) (arith_term_R * (arith_factor (arith_primary 10)) arith_term_R)) arith_expression_R) loop (statements statements (statement (assignment_statement CAR := (arith_expression (arith_term (arith_factor (arith_primary CAR)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary CAR)) arith_term_R) arith_expression_R)) ;))) end loop ;))) end if ;))) (statement (if_statement if (bool_expression (bool_term (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary APPLE)) arith_term_R) arith_expression_R) (relation_op >) (arith_expression (arith_term (arith_factor (arith_primary 5)) arith_term_R) arith_expression_R))) (bool_term_R && (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary BANANA)) arith_term_R) arith_expression_R) (relation_op <=) (arith_expression (arith_term (arith_factor (arith_primary 10)) arith_term_R) arith_expression_R))) bool_term_R)) (bool_expression_R || (bool_term (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary CAR)) arith_term_R) arith_expression_R) (relation_op =) (arith_expression (arith_term (arith_factor (arith_primary 4)) arith_term_R) arith_expression_R))) bool_term_R) bool_expression_R)) then statements end if ;))) (statement (if_statement if (bool_expression (bool_term (bool_factor ! (bool_primary (arith_expression (arith_term (arith_factor (arith_primary APPLE)) arith_term_R) arith_expression_R) (relation_op <>) (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R))) bool_term_R) (bool_expression_R || (bool_term (bool_factor ! (bool_primary (arith_expression (arith_term (arith_factor (arith_primary BANANA)) arith_term_R) arith_expression_R) (relation_op <>) (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R))) bool_term_R) bool_expression_R)) then (statements (statements statements (statement (assignment_statement APPLE := (arith_expression (arith_term (arith_factor (arith_primary 5)) arith_term_R) arith_expression_R) ;))) (statement (assignment_statement APPLE := (arith_expression (arith_term (arith_factor (arith_primary BANANA)) (arith_term_R * (arith_factor (arith_primary ( (arith_expression (arith_term (arith_factor (arith_primary CAR)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary 5)) arith_term_R) arith_expression_R)) ))) arith_term_R)) arith_expression_R) ;))) else (statements statements (statement (if_statement if (bool_expression (bool_term (bool_factor (bool_primary (arith_expression (arith_term (arith_factor (arith_primary APPLE)) arith_term_R) arith_expression_R) (relation_op =) (arith_expression (arith_term (arith_factor (arith_primary APPLE)) arith_term_R) arith_expression_R))) (bool_term_R && (bool_factor (bool_primary (arith_expression (arith_term (arith_factor - (arith_primary BANANA)) arith_term_R) arith_expression_R) (relation_op >=) (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R))) bool_term_R)) bool_expression_R) then (statements statements (statement (for_statement for CAR in (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R) .. (arith_expression (arith_term (arith_factor - (arith_primary 1)) arith_term_R) arith_expression_R) loop (statements statements (statement (for_statement for BANANA in (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R) .. (arith_expression (arith_term (arith_factor (arith_primary 10)) arith_term_R) arith_expression_R) loop (statements statements (statement (for_statement for APPLE in (arith_expression (arith_term (arith_factor (arith_primary 0)) arith_term_R) arith_expression_R) .. (arith_expression (arith_term (arith_factor (arith_primary 5)) arith_term_R) arith_expression_R) loop (statements statements (statement (write_statement write (arith_expression (arith_term (arith_factor (arith_primary APPLE)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary BANANA)) arith_term_R) (arith_expression_R + (arith_term (arith_factor (arith_primary CAR)) arith_term_R) arith_expression_R))) ;))) end loop ;))) end loop ;))) end loop ;))) end if ;))) end if ;))) end ;)
